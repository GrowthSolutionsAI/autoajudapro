import { type NextRequest, NextResponse } from "next/server"

// CHAVE GROQ DIRETA (garantida)
const GROQ_API_KEY = "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"

// MODELOS GROQ FUNCIONAIS (testados)
const GROQ_MODELS = {
  primary: "llama3-70b-8192",
  fallback: "llama3-8b-8192",
  instant: "llama-3.1-8b-instant",
}

interface Message {
  role: "user" | "assistant" | "system"
  content: string
}

interface ChatRequest {
  messages: Message[]
  sessionId?: string
  userEmail?: string
}

// Fun√ß√£o para gerar resposta contextual da Sofia
function generateSofiaResponse(messages: Message[]): string {
  const lastUserMessage = messages[messages.length - 1]?.content?.toLowerCase() || ""
  const userName = extractUserName(messages)

  // Primeira mensagem (nome do usu√°rio)
  if (messages.length <= 2 && !lastUserMessage.includes("?") && lastUserMessage.length < 50) {
    return `Prazer em conhec√™-lo, ${userName}! üòä

Sou a Sofia, sua IA especializada em psicologia positiva e desenvolvimento pessoal. Estou aqui para te apoiar em sua jornada de autoconhecimento e bem-estar.

**üåü Posso te ajudar com:**
- üíï Relacionamentos e comunica√ß√£o
- üß† Ansiedade e gest√£o emocional  
- ‚≠ê Autoestima e confian√ßa
- üíº Carreira e prop√≥sito
- üå± Desenvolvimento pessoal

**Em qual dessas √°reas voc√™ gostaria de focar hoje?** üíô`
  }

  // Respostas contextuais baseadas na mensagem
  if (
    lastUserMessage.includes("ansiedade") ||
    lastUserMessage.includes("ansioso") ||
    lastUserMessage.includes("nervoso")
  ) {
    return `${userName}, entendo que voc√™ est√° se sentindo ansioso üíô

**üßò T√©cnica R√°pida para Ansiedade:**
1. **Respira√ß√£o 4-7-8:**
   - Inspire por 4 segundos
   - Segure por 7 segundos
   - Expire por 8 segundos
   - Repita 4 vezes

2. **Grounding 5-4-3-2-1:**
   - 5 coisas que voc√™ v√™
   - 4 coisas que voc√™ toca
   - 3 coisas que voc√™ ouve
   - 2 coisas que voc√™ cheira
   - 1 coisa que voc√™ saboreia

**üí≠ Lembre-se:** A ansiedade √© tempor√°ria. Voc√™ j√° superou momentos dif√≠ceis antes.

O que especificamente est√° te deixando ansioso hoje? ü§ó`
  }

  // Resposta geral para outras mensagens
  return `${userName}, obrigada por compartilhar isso comigo üíô

Estou aqui para te apoiar em qualquer desafio que voc√™ esteja enfrentando.

**üåü Como posso te ajudar hoje:**
- üíï Conversas sobre relacionamentos
- üßò T√©cnicas para ansiedade e estresse
- ‚≠ê Desenvolvimento da autoestima
- üíº Orienta√ß√£o sobre carreira
- üå± Estrat√©gias de autocuidado

O que est√° em seu cora√ß√£o neste momento? Compartilhe comigo! ü§ó`
}

function extractUserName(messages: Message[]): string {
  if (messages.length >= 1) {
    const firstUserMessage = messages.find((msg) => msg.role === "user")?.content || ""
    if (firstUserMessage.length < 50 && !firstUserMessage.includes("?") && !firstUserMessage.includes(".")) {
      return firstUserMessage.split(" ")[0]
    }
  }
  return "amigo(a)"
}

// Fun√ß√£o para tentar m√∫ltiplos modelos
async function tryGroqModels(messages: any[], requestId: string) {
  const modelsToTry = [GROQ_MODELS.primary, GROQ_MODELS.fallback, GROQ_MODELS.instant]

  for (const model of modelsToTry) {
    try {
      console.log(`üîÑ [${requestId}] Tentando modelo: ${model}`)

      const response = await fetch("https://api.groq.com/openai/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${GROQ_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: model,
          messages: messages,
          temperature: 0.8,
          max_tokens: 500,
          top_p: 0.9,
          stream: false,
        }),
      })

      if (response.ok) {
        const data = await response.json()
        const assistantMessage = data.choices?.[0]?.message?.content

        if (assistantMessage) {
          console.log(`‚úÖ [${requestId}] Sucesso com modelo: ${model}`)
          return {
            message: assistantMessage,
            model: model,
            usage: data.usage,
          }
        }
      } else {
        console.log(`‚ùå [${requestId}] Modelo ${model} falhou: ${response.status}`)
      }
    } catch (error) {
      console.log(`‚ùå [${requestId}] Erro no modelo ${model}:`, error)
    }
  }

  return null
}

export async function POST(req: NextRequest) {
  const startTime = Date.now()
  const requestId = Math.random().toString(36).substring(2, 8)

  try {
    console.log(`üöÄ [${requestId}] === NOVA REQUISI√á√ÉO CHAT ===`)

    // Parse da requisi√ß√£o
    const body: ChatRequest = await req.json()
    const { messages } = body

    console.log(`üìù [${requestId}] Mensagens recebidas: ${messages?.length}`)

    if (!messages || !Array.isArray(messages) || messages.length === 0) {
      console.error(`‚ùå [${requestId}] Mensagens inv√°lidas`)
      return NextResponse.json({ error: "Mensagens inv√°lidas" }, { status: 400 })
    }

    // Verificar se deve usar IA ou resposta contextual
    const lastMessage = messages[messages.length - 1]?.content?.toLowerCase() || ""
    const shouldUseAI = messages.length > 2 && lastMessage.length > 10

    console.log(`ü§ñ [${requestId}] Usar IA: ${shouldUseAI}`)

    if (!shouldUseAI) {
      // Usar resposta contextual da Sofia
      const sofiaResponse = generateSofiaResponse(messages)
      console.log(`‚úÖ [${requestId}] Resposta contextual gerada`)

      return NextResponse.json({
        message: sofiaResponse,
        success: true,
        provider: "Sofia-Contextual",
        responseTime: Date.now() - startTime,
      })
    }

    // Usar IA do Groq para conversas mais complexas
    console.log(`üîë [${requestId}] Usando Groq AI...`)

    const groqMessages = [
      {
        role: "system" as const,
        content: `Voc√™ √© Sofia, uma IA especializada em psicologia positiva e desenvolvimento pessoal brasileira.

PERSONALIDADE: Emp√°tica, calorosa e acolhedora. Use linguagem brasileira natural e pr√≥xima.

DIRETRIZES OBRIGAT√ìRIAS:
- Respostas entre 100-250 palavras
- Use o nome da pessoa sempre que poss√≠vel
- Fa√ßa 1-2 perguntas para entender melhor
- Use 2-3 emojis por mensagem (n√£o exagere)
- Termine sempre com uma pergunta que incentive o di√°logo
- Seja pr√°tica e ofere√ßa t√©cnicas concretas

√ÅREAS DE ESPECIALIDADE:
1. Relacionamentos e comunica√ß√£o
2. Sa√∫de mental (ansiedade, estresse, depress√£o)
3. Desenvolvimento pessoal (autoestima, confian√ßa)
4. Carreira e prop√≥sito de vida
5. T√©cnicas de bem-estar (respira√ß√£o, mindfulness)

IMPORTANTE: Seja concisa, emp√°tica e sempre termine com uma pergunta engajadora.`,
      },
      ...messages.map((msg) => ({
        role: msg.role,
        content: msg.content.trim().substring(0, 1000),
      })),
    ]

    // Tentar m√∫ltiplos modelos
    const groqResult = await tryGroqModels(groqMessages, requestId)

    if (groqResult) {
      return NextResponse.json({
        message: groqResult.message,
        success: true,
        provider: "GroqCloud",
        model: groqResult.model,
        responseTime: Date.now() - startTime,
        metadata: {
          model: groqResult.model,
          usage: groqResult.usage,
        },
      })
    }

    // Se todos os modelos falharam, usar fallback
    console.log(`‚ùå [${requestId}] Todos os modelos Groq falharam, usando fallback`)
    const sofiaResponse = generateSofiaResponse(messages)

    return NextResponse.json({
      message: sofiaResponse,
      success: true,
      provider: "Sofia-Fallback",
      responseTime: Date.now() - startTime,
    })
  } catch (error) {
    console.error(`‚ùå [${requestId}] Erro geral:`, error)

    // Fallback de emerg√™ncia
    const sofiaResponse = generateSofiaResponse([])

    return NextResponse.json({
      message: sofiaResponse,
      success: true,
      provider: "Sofia-Emergency",
      responseTime: Date.now() - startTime,
    })
  }
}
