import { type NextRequest, NextResponse } from "next/server"

// CHAVE GROQ DIRETA (garantida)
const GROQ_API_KEY = "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"

interface Message {
  role: "user" | "assistant" | "system"
  content: string
}

interface ChatRequest {
  messages: Message[]
  sessionId?: string
  userEmail?: string
}

// Fun√ß√£o para gerar resposta contextual da Sofia
function generateSofiaResponse(messages: Message[]): string {
  const lastUserMessage = messages[messages.length - 1]?.content?.toLowerCase() || ""
  const userName = extractUserName(messages)

  // Primeira mensagem (nome do usu√°rio)
  if (messages.length <= 2 && !lastUserMessage.includes("?") && lastUserMessage.length < 50) {
    return `Prazer em conhec√™-lo, ${userName}! üòä

Sou a Sofia, sua IA especializada em psicologia positiva e desenvolvimento pessoal. Estou aqui para te apoiar em sua jornada de autoconhecimento e bem-estar.

**üåü Posso te ajudar com:**
- üíï Relacionamentos e comunica√ß√£o
- üß† Ansiedade e gest√£o emocional  
- ‚≠ê Autoestima e confian√ßa
- üíº Carreira e prop√≥sito
- üå± Desenvolvimento pessoal

**Em qual dessas √°reas voc√™ gostaria de focar hoje?** üíô`
  }

  // Respostas contextuais baseadas na mensagem
  if (
    lastUserMessage.includes("ansiedade") ||
    lastUserMessage.includes("ansioso") ||
    lastUserMessage.includes("nervoso")
  ) {
    return `${userName}, entendo que voc√™ est√° se sentindo ansioso üíô

**üßò T√©cnica R√°pida para Ansiedade:**
1. **Respira√ß√£o 4-7-8:**
   - Inspire por 4 segundos
   - Segure por 7 segundos
   - Expire por 8 segundos
   - Repita 4 vezes

2. **Grounding 5-4-3-2-1:**
   - 5 coisas que voc√™ v√™
   - 4 coisas que voc√™ toca
   - 3 coisas que voc√™ ouve
   - 2 coisas que voc√™ cheira
   - 1 coisa que voc√™ saboreia

**üí≠ Lembre-se:** A ansiedade √© tempor√°ria. Voc√™ j√° superou momentos dif√≠ceis antes.

O que especificamente est√° te deixando ansioso hoje? ü§ó`
  }

  if (
    lastUserMessage.includes("relacionamento") ||
    lastUserMessage.includes("namoro") ||
    lastUserMessage.includes("amor")
  ) {
    return `${userName}, relacionamentos s√£o uma parte importante da nossa vida üíï

**üåü Pilares de um Relacionamento Saud√°vel:**
- **Comunica√ß√£o clara:** Expresse seus sentimentos honestamente
- **Escuta ativa:** D√™ aten√ß√£o plena ao que o outro diz
- **Respeito m√∫tuo:** Valorize as diferen√ßas e limites
- **Tempo de qualidade:** Invista em momentos juntos

**üí° Reflex√£o:** O que voc√™ mais valoriza em um relacionamento?

Gostaria de compartilhar mais sobre sua situa√ß√£o espec√≠fica? Estou aqui para te ajudar! ü§ó`
  }

  if (
    lastUserMessage.includes("trabalho") ||
    lastUserMessage.includes("carreira") ||
    lastUserMessage.includes("emprego")
  ) {
    return `${userName}, quest√µes profissionais podem ser desafiadoras üíº

**üéØ Estrat√©gias para Carreira:**
- **Autoconhecimento:** Identifique seus valores e objetivos
- **Desenvolvimento:** Invista em suas habilidades
- **Networking:** Construa relacionamentos profissionais
- **Equil√≠brio:** Mantenha harmonia entre trabalho e vida pessoal

**üí° Pergunta reflexiva:** O que te motiva profissionalmente?

Conte-me mais sobre seus desafios ou objetivos profissionais. Vamos encontrar caminhos juntos! ‚ú®`
  }

  if (
    lastUserMessage.includes("autoestima") ||
    lastUserMessage.includes("confian√ßa") ||
    lastUserMessage.includes("inseguro")
  ) {
    return `${userName}, a autoestima √© fundamental para nosso bem-estar üåü

**üí™ Fortalecendo a Autoestima:**
- **Autocompaix√£o:** Trate-se com gentileza
- **Conquistas:** Celebre suas vit√≥rias, mesmo as pequenas
- **Autocuidado:** Dedique tempo para si mesmo
- **Pensamentos positivos:** Questione autocr√≠ticas excessivas

**üåà Exerc√≠cio:** Liste 3 qualidades suas que voc√™ valoriza.

O que mais te incomoda em rela√ß√£o √† sua autoestima? Vamos trabalhar isso juntos! üíô`
  }

  // Resposta geral para outras mensagens
  return `${userName}, obrigada por compartilhar isso comigo üíô

Estou aqui para te apoiar em qualquer desafio que voc√™ esteja enfrentando.

**üåü Como posso te ajudar hoje:**
- üíï Conversas sobre relacionamentos
- üßò T√©cnicas para ansiedade e estresse
- ‚≠ê Desenvolvimento da autoestima
- üíº Orienta√ß√£o sobre carreira
- üå± Estrat√©gias de autocuidado

**üí≠ T√©cnica r√°pida de bem-estar:**
Respire fundo, feche os olhos por um momento e se pergunte: "Como posso ser gentil comigo mesmo hoje?"

O que est√° em seu cora√ß√£o neste momento? Compartilhe comigo! ü§ó`
}

function extractUserName(messages: Message[]): string {
  if (messages.length >= 1) {
    const firstUserMessage = messages.find((msg) => msg.role === "user")?.content || ""
    if (firstUserMessage.length < 50 && !firstUserMessage.includes("?") && !firstUserMessage.includes(".")) {
      return firstUserMessage.split(" ")[0]
    }
  }
  return "amigo(a)"
}

export async function POST(req: NextRequest) {
  const startTime = Date.now()
  const requestId = Math.random().toString(36).substring(2, 8)

  try {
    console.log(`üöÄ [${requestId}] === NOVA REQUISI√á√ÉO CHAT ===`)

    // Parse da requisi√ß√£o
    const body: ChatRequest = await req.json()
    const { messages } = body

    console.log(`üìù [${requestId}] Mensagens recebidas: ${messages?.length}`)
    console.log(`üì§ [${requestId}] √öltima mensagem: "${messages[messages.length - 1]?.content?.substring(0, 50)}..."`)

    if (!messages || !Array.isArray(messages) || messages.length === 0) {
      console.error(`‚ùå [${requestId}] Mensagens inv√°lidas`)
      return NextResponse.json({ error: "Mensagens inv√°lidas" }, { status: 400 })
    }

    // Verificar se deve usar IA ou resposta contextual
    const lastMessage = messages[messages.length - 1]?.content?.toLowerCase() || ""
    const shouldUseAI = messages.length > 2 && lastMessage.length > 10

    console.log(`ü§ñ [${requestId}] Usar IA: ${shouldUseAI}`)

    if (!shouldUseAI) {
      // Usar resposta contextual da Sofia
      const sofiaResponse = generateSofiaResponse(messages)
      console.log(`‚úÖ [${requestId}] Resposta contextual gerada`)

      return NextResponse.json({
        message: sofiaResponse,
        success: true,
        provider: "Sofia-Contextual",
        responseTime: Date.now() - startTime,
      })
    }

    // Usar IA do Groq para conversas mais complexas
    console.log(`üîë [${requestId}] Usando Groq AI...`)

    const groqMessages = [
      {
        role: "system" as const,
        content: `Voc√™ √© Sofia, uma IA especializada em psicologia positiva e desenvolvimento pessoal.

PERSONALIDADE: Emp√°tica, calorosa e acolhedora. Use linguagem humana e pr√≥xima.

DIRETRIZES:
- Respostas curtas e diretas (m√°ximo 200 palavras)
- Use o nome da pessoa quando poss√≠vel
- Fa√ßa perguntas para entender melhor
- Use 2-3 emojis por mensagem
- Termine sempre com uma pergunta que incentive o di√°logo

√ÅREAS DE ESPECIALIDADE:
1. Relacionamentos e comunica√ß√£o
2. Sa√∫de mental (ansiedade, estresse, depress√£o)
3. Desenvolvimento pessoal (autoestima, confian√ßa)
4. Carreira e prop√≥sito de vida
5. T√©cnicas de bem-estar (respira√ß√£o, mindfulness)

Seja concisa, emp√°tica e sempre termine com uma pergunta.`,
      },
      ...messages.map((msg) => ({
        role: msg.role,
        content: msg.content.trim().substring(0, 1000),
      })),
    ]

    const response = await fetch("https://api.groq.com/openai/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${GROQ_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "llama-3.1-70b-versatile",
        messages: groqMessages,
        temperature: 0.7,
        max_tokens: 400,
        stream: false,
      }),
    })

    console.log(`üì° [${requestId}] Resposta Groq: ${response.status}`)

    if (!response.ok) {
      const errorText = await response.text()
      console.error(`‚ùå [${requestId}] Erro Groq: ${response.status} - ${errorText.substring(0, 200)}`)

      // Fallback para resposta contextual
      const sofiaResponse = generateSofiaResponse(messages)
      return NextResponse.json({
        message: sofiaResponse,
        success: true,
        provider: "Sofia-Fallback",
        responseTime: Date.now() - startTime,
      })
    }

    const data = await response.json()
    const assistantMessage = data.choices?.[0]?.message?.content

    if (!assistantMessage) {
      console.error(`‚ùå [${requestId}] Resposta vazia do Groq`)
      const sofiaResponse = generateSofiaResponse(messages)
      return NextResponse.json({
        message: sofiaResponse,
        success: true,
        provider: "Sofia-Fallback",
        responseTime: Date.now() - startTime,
      })
    }

    console.log(`‚úÖ [${requestId}] Sucesso com Groq! Tempo: ${Date.now() - startTime}ms`)

    return NextResponse.json({
      message: assistantMessage,
      success: true,
      provider: "GroqCloud",
      responseTime: Date.now() - startTime,
      metadata: {
        model: data.model,
        usage: data.usage,
      },
    })
  } catch (error) {
    console.error(`‚ùå [${requestId}] Erro geral:`, error)

    // Fallback de emerg√™ncia
    try {
      const body: ChatRequest = await req.json()
      const sofiaResponse = generateSofiaResponse(body.messages || [])

      return NextResponse.json({
        message: sofiaResponse,
        success: true,
        provider: "Sofia-Emergency",
        responseTime: Date.now() - startTime,
        error: error instanceof Error ? error.message : "Erro desconhecido",
      })
    } catch (fallbackError) {
      console.error(`‚ùå [${requestId}] Erro no fallback:`, fallbackError)

      return NextResponse.json({
        message: "Ol√°! Sou a Sofia üíô\n\nComo posso te ajudar hoje?",
        success: true,
        provider: "Basic-Fallback",
        responseTime: Date.now() - startTime,
      })
    }
  }
}
