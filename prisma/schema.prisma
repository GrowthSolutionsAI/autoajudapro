// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  conversations Conversation[]
  subscriptions Subscription[]
  analytics     UserAnalytics[]

  @@map("users")
}

model Conversation {
  id          String   @id @default(cuid())
  title       String
  persona     String   @default("general") // general, relationships, career, wellness, finance
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  content        String
  role           String   // user, assistant, system
  conversationId String
  tokens         Int?     @default(0)
  model          String?  @default("claude-3-sonnet")
  provider       String?  @default("anthropic")
  createdAt      DateTime @default(now())

  // Relacionamentos
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String
  planType  String   // free, daily, weekly, monthly
  status    String   @default("active") // active, cancelled, expired
  startDate DateTime @default(now())
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model UserAnalytics {
  id               String   @id @default(cuid())
  userId           String
  date             DateTime @default(now())
  messagesCount    Int      @default(0)
  tokensUsed       Int      @default(0)
  conversationsCount Int    @default(0)
  activeMinutes    Int      @default(0)

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("user_analytics")
}

model Payment {
  id               String   @id @default(cuid())
  reference        String   @unique
  txid             String?
  status           String   @default("pending")
  amount           Float
  customerName     String
  customerEmail    String
  customerDocument String?
  planId           String
  provider         String   @default("banco-inter")
  pixKey           String?
  qrCode           String?
  confirmedAt      DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("payments")
}
