console.log("üîê TESTE ESPEC√çFICO DE CREDENCIAIS - BANCO INTER")
console.log("=".repeat(60))

const testSpecificCredentials = async () => {
  // Credenciais fornecidas
  const credentials = {
    clientId: "fd1641ee-6011-4132-b2ea-b87ed8edc4c7",
    clientSecret: "c838f820-224d-486a-a519-290a60f8db48",
    conta: "413825752",
  }

  console.log("üìã Credenciais a serem testadas:")
  console.log("   Client ID:", credentials.clientId)
  console.log("   Client Secret:", credentials.clientSecret)
  console.log("   Conta:", credentials.conta)

  // URLs para testar
  const urls = [
    {
      name: "Produ√ß√£o",
      url: "https://cdpj.partners.bancointer.com.br/oauth/v2/token",
    },
    {
      name: "Sandbox",
      url: "https://cdpj-sandbox.partners.uatinter.co/oauth/v2/token",
    },
  ]

  for (const urlConfig of urls) {
    console.log(`\nüåê Testando ambiente: ${urlConfig.name}`)
    console.log(`   URL: ${urlConfig.url}`)

    try {
      const body = new URLSearchParams({
        client_id: credentials.clientId,
        client_secret: credentials.clientSecret,
        grant_type: "client_credentials",
        scope: "cob.read",
      }).toString()

      console.log("   üì§ Enviando requisi√ß√£o...")

      const response = await fetch(urlConfig.url, {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
          Accept: "application/json",
        },
        body: body,
      })

      console.log("   üìä Status:", response.status, response.statusText)

      const responseText = await response.text()
      console.log("   üìù Resposta completa:")
      console.log("   " + responseText)

      if (response.ok) {
        console.log("   ‚úÖ SUCESSO neste ambiente!")
        const data = JSON.parse(responseText)
        console.log("   üéØ Token obtido:", data.access_token.substring(0, 30) + "...")
        return { success: true, environment: urlConfig.name, token: data.access_token }
      } else {
        console.log("   ‚ùå Falhou neste ambiente")

        // An√°lise espec√≠fica do erro
        if (response.status === 400) {
          console.log("   üîç Erro 400: Credenciais ou formato incorreto")
        } else if (response.status === 401) {
          console.log("   üîç Erro 401: N√£o autorizado - credenciais inv√°lidas")
        } else if (response.status === 403) {
          console.log("   üîç Erro 403: Proibido - integra√ß√£o n√£o ativa ou sem permiss√£o")
        }
      }
    } catch (error) {
      console.log("   ‚ùå Erro de conex√£o:", error.message)
    }

    // Aguardar entre testes
    await new Promise((resolve) => setTimeout(resolve, 5000))
  }

  return { success: false }
}

testSpecificCredentials().then((result) => {
  console.log("\n" + "=".repeat(60))
  if (result.success) {
    console.log(`üéâ CREDENCIAIS V√ÅLIDAS NO AMBIENTE: ${result.environment}`)
    console.log("‚úÖ Integra√ß√£o funcionando")
  } else {
    console.log("‚ùå CREDENCIAIS N√ÉO FUNCIONARAM EM NENHUM AMBIENTE")
    console.log("üîß Poss√≠veis solu√ß√µes:")
    console.log("   1. Verificar se integra√ß√£o est√° ativa no portal")
    console.log("   2. Confirmar Client ID e Secret no portal")
    console.log("   3. Verificar se conta est√° correta")
    console.log("   4. Contatar suporte Banco Inter")
  }
  console.log("=".repeat(60))
})
