console.log("üîç VERIFICA√á√ÉO PR√â-INICIALIZA√á√ÉO\n")

const fs = require("fs")
const path = require("path")
const { execSync } = require("child_process")

// Verificar arquivos essenciais
function checkEssentialFiles() {
  console.log("üìÅ Verificando arquivos essenciais...")

  const essentialFiles = ["next.config.mjs", "package.json", "app/page.tsx", "app/layout.tsx", "app/api/chat/route.ts"]

  let allFilesExist = true

  essentialFiles.forEach((file) => {
    const exists = fs.existsSync(path.join(process.cwd(), file))
    console.log(`   ${exists ? "‚úÖ" : "‚ùå"} ${file}`)
    if (!exists) allFilesExist = false
  })

  return allFilesExist
}

// Verificar vari√°veis de ambiente
function checkEnvironmentVariables() {
  console.log("\nüîê Verificando vari√°veis de ambiente...")

  // Verificar se .env.local existe
  const envLocalExists = fs.existsSync(path.join(process.cwd(), ".env.local"))
  console.log(`   ${envLocalExists ? "‚úÖ" : "‚ùå"} .env.local`)

  // Verificar vari√°veis importantes
  const envVars = {
    GROQ_API_KEY: process.env.GROQ_API_KEY,
    NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,
  }

  Object.entries(envVars).forEach(([key, value]) => {
    console.log(`   ${value ? "‚úÖ" : "‚ùì"} ${key}`)
  })

  // Criar .env.local se n√£o existir
  if (!envLocalExists) {
    console.log("\n‚ö†Ô∏è  .env.local n√£o encontrado. Criando arquivo com valores padr√£o...")

    const envContent = `GROQ_API_KEY="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"
NEXT_PUBLIC_APP_URL="http://localhost:3000"
`

    try {
      fs.writeFileSync(path.join(process.cwd(), ".env.local"), envContent)
      console.log("‚úÖ .env.local criado com sucesso!")
    } catch (error) {
      console.log("‚ùå Erro ao criar .env.local:", error.message)
    }
  }
}

// Verificar depend√™ncias
function checkDependencies() {
  console.log("\nüì¶ Verificando depend√™ncias...")

  try {
    console.log("   ‚è≥ Verificando node_modules...")
    const nodeModulesExists = fs.existsSync(path.join(process.cwd(), "node_modules"))
    console.log(`   ${nodeModulesExists ? "‚úÖ" : "‚ùå"} node_modules`)

    if (!nodeModulesExists) {
      console.log("\n‚ö†Ô∏è  node_modules n√£o encontrado. Execute: npm install")
    }
  } catch (error) {
    console.log("‚ùå Erro ao verificar depend√™ncias:", error.message)
  }
}

// Verificar porta 3000
function checkPort() {
  console.log("\nüåê Verificando porta 3000...")

  try {
    // Tenta fazer uma requisi√ß√£o para localhost:3000
    const http = require("http")
    const req = http.get("http://localhost:3000", () => {
      console.log("‚ö†Ô∏è  Porta 3000 j√° est√° em uso!")
      console.log("   üí° Execute: npx kill-port 3000")
    })

    req.on("error", () => {
      console.log("‚úÖ Porta 3000 dispon√≠vel")
    })

    // Define um timeout para a requisi√ß√£o
    req.setTimeout(1000, () => {
      req.abort()
    })
  } catch (error) {
    console.log("‚úÖ Porta 3000 dispon√≠vel")
  }
}

// Executar todas as verifica√ß√µes
async function runAllChecks() {
  console.log("üöÄ Iniciando verifica√ß√µes pr√©-inicializa√ß√£o...\n")

  const filesOk = checkEssentialFiles()
  checkEnvironmentVariables()
  checkDependencies()
  checkPort()

  console.log("\n" + "‚îÄ".repeat(50))

  if (filesOk) {
    console.log("‚úÖ SISTEMA PRONTO PARA INICIAR!")
    console.log("\nüí° EXECUTE:")
    console.log("   npm run dev")
  } else {
    console.log("‚ö†Ô∏è  ATEN√á√ÉO: Alguns arquivos essenciais est√£o faltando!")
    console.log("   Verifique os erros acima antes de iniciar.")
  }

  console.log("\n" + "‚îÄ".repeat(50))
}

// Executar
runAllChecks()
